Grigoriy Redozubov
Fidel Briones


1. Program
to compile: make

Running this program, you have three choices:
./work ==> will print out the times for Prim's and Kruskal's algorithm for a number of randomly generated graphs:
	graphs with numNodes of 50, 100, 150, ... , 950, 1000
	For each of the above numNodes, there will be graphs with degreeLimit numNodes/10, numNodes/3, and numNodes
	The program will also write a file variedGraph.csv that contains the times for solving these graphs

./work 1 <numNode> <degreeLimit> <weightLimit> ==> will create and print a graph with the given parameters
	It is suggested to give a low numNode, as the entire graph will not be visible otherwise
	The Prim's and Kruskal's solutions to this graph will also be printed

./work 2 ==> will print out the times for Prim's and Kruskal's algorithm for complete graphs with
	nodeNums of 50, 100, 150, ... , 950, 1000
	These times will also be written to a file completeGraph.csv



data structures:
vector - stores nodes in graph
list - stores edges in nodes
priority queue - orders edges in MST algorithms


Kruskal's Algorithm runs in O(E logE)
Prim's Algorithm runs in O(E logV)
However, Prim's algorithm is about twice as fast as Kruskal's algorithm.
We assume this is because Kruskal's algorithm looks through every edge twice (once for the original, and once for the reverse).
Despite this, they still grow at a similar rate.



